dnl configure.in for fs2_open
dnl
dnl $Id: configure.in,v 2.2 2003-03-11 19:00:05 penguin Exp $

AC_INIT(fs2_open, 3.5)
AC_CONFIG_SRCDIR(code/freespace2/freespace.cpp)
AM_INIT_AUTOMAKE([ no-define ])

AC_DEFINE([NO_CD_CHECK])

dnl The configuration options
dnl -------------------------

AC_ARG_ENABLE(joystick, 
        AC_HELP_STRING([--disable-joystick],
                       [TEST: disable joystick support]),
        [fs2_joystick=$enableval],
        [fs2_joystick=yes],
)

AC_ARG_ENABLE(networking, 
        AC_HELP_STRING([--disable-networking],
                       [TEST: disable networking (multi-player)]),
        [fs2_networking=$enableval],
        [fs2_networking=yes],
)

AC_ARG_ENABLE(sound, 
        AC_HELP_STRING([--disable-sound],
                       [TEST: disable sound]),
        [fs2_sound=$enableval],
        [fs2_sound=yes],
)

AC_ARG_ENABLE(grsoft, 
        AC_HELP_STRING([--enable-grsoft],
                       [enable software rendering (needed for FRED)]),
        [fs2_grsoft=$enableval],
        [fs2_grsoft=no],
)

AC_ARG_ENABLE(debug,
        AC_HELP_STRING([--enable-debug],
                       [build in DEBUG mode (default is release mode)]),
        [fs2_debug=$enableval],
        [fs2_debug=no],
)



AC_CANONICAL_HOST

dnl check OS type -- right now, we support
dnl windows OS (via mingw) and unix (linux, etc.)
dnl
dnl the following block will need to be updated as additional
dnl environments are supported
fs2_os_win32="no"
fs2_os_unix="no"

case $host_os in
    mingw*)
        # windows
        echo "using Win32 defines (for $host_os)"
        fs2_os_win32="yes"
        ;;
    linux*)
        # linux
        echo "Using Unix defines (for $host_os)"
        fs2_os_unix="yes"
        ;;
esac

if test "$fs2_os_win32" = "no" && test "$fs2_os_unix" = "no" ; then
        echo "fs2_open does not support $host_os"
        echo "check the configure.in file"
        echo "host_cpu:    " $host_cpu
        echo "host_vendor: " $host_vendor
        echo "host_os:     " $host_os
        exit 1;
fi


## define compiler switches
if ! test "$fs2_joystick" = "yes" ; then
        AC_DEFINE([NO_JOYSTICK])
fi
if ! test "$fs2_networking" = "yes" ; then
        AC_DEFINE([NO_NETWORK])
        AC_DEFINE([NO_STANDALONE])
fi
if ! test "$fs2_sound" = "yes" ; then
        AC_DEFINE([NO_SOUND])
fi
if ! test "$fs2_grsoft" = "yes" ; then
        AC_DEFINE([NO_SOFTWARE_RENDERING])
fi

if test "$fs2_debug" = "yes" ; then
        AC_DEFINE([_DEBUG])
        AC_SUBST(CXXFLAGS, [-O0 -g])
        AC_SUBST(LDFLAGS, [-g])
else
        AC_DEFINE([NDEBUG])
        AC_SUBST(CXXFLAGS, [-O2])
        AC_SUBST(LDFLAGS, [])
fi


# generate appropriate conditionals for Makefile.am
AM_CONDITIONAL(FS2_OS_WIN32,   test "$fs2_os_win32" = "yes")
AM_CONDITIONAL(FS2_OS_UNIX,    test "$fs2_os_unix"  = "yes")

AM_CONDITIONAL(FS2_JOYSTICK,   test "$fs2_joystick"   = "yes")
AM_CONDITIONAL(FS2_NETWORKING, test "$fs2_networking" = "yes")
AM_CONDITIONAL(FS2_SOUND,      test "$fs2_sound"      = "yes")
AM_CONDITIONAL(FS2_GRSOFT,     test "$fs2_grsoft"     = "yes")


dnl Check for programs
AC_PROG_CXX

dnl Check for headers

dnl -- this isn't working...
dnl if test "$fs2_os_win32" = "yes" ; then
dnl        AC_SUBST(DX8_INCLUDE, [-I/dx8/include])
dnl        AC_CHECK_HEADER([dshow.h], [], [echo dshow.h not found; exit 1])
dnl fi

dnl this is hardcoded until I can figure it out...
AC_SUBST(DX8_INCLUDE, [-I/c/dx8/include])
AC_SUBST(DX8_LIB,     [-L/c/dx8/lib])

dnl The makefiles we create
AC_OUTPUT([Makefile code/Makefile])
